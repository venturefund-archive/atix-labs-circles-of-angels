def getDeploymentServer(branch) {
    switch (branch) {
        case ~/^master$/:
            return ''
        case ~/^develop$/:
            return COA_IP
	default:
            return COA_IP
    }
}

pipeline {
  agent { 
    docker { 
      image 'atixlabs/alpine-git:1.2' 
      args  '-u 0:0' 
    }
  }

  post {
    cleanup {
      cleanWs()
    }
  }

  environment {
    SLACK_TOKEN = credentials('slack_token')
    COA_IP = credentials('COA_staging')
  }

  stages {
    stage("checkout") {
      steps {
        checkout scm
      }
    }

    stage("upload build") {
      steps {
        script {
          GIT_BRANCH = sh (
                  script: 'git rev-parse --abbrev-ref HEAD',
                  returnStdout: true
                ).trim()
          withEnv(['DEPLOY_SERVER=' + getDeploymentServer(GIT_BRANCH), 'SERVE_DIR=/home/circles-of-angels', 'BUILDS_DIR=/home/builds/circles-of-angels']) {
            sshagent(credentials: ['ssh_jenkins_global'], ignoreMissing: true) {
              sh '''ssh -oStrictHostKeyChecking=no ${DEPLOY_SERVER} "
                    mkdir /home/backup-front-configs
                    cp -r ${SERVE_DIR}/api/api.js /home/backup-front-configs;
                    cp -aL ${SERVE_DIR} ${BUILDS_DIR}/$BUILD_NUMBER;
                    "
                '''

              sh '''rsync -av -e "ssh -oStrictHostKeyChecking=no" ${WORKSPACE}/* ${DEPLOY_SERVER}:${SERVE_DIR}/'''
     
              sh '''ssh -oStrictHostKeyChecking=no ${DEPLOY_SERVER} "
                    export PATH=/root/.nvm/versions/node/v10.15.1/bin:$PATH
                    cd ${SERVE_DIR}
                    pm2 delete front
                    cp -r /home/backup-front-configs/* ${SERVE_DIR}/api;
                    rm -r /home/backup-front-configs;
                    npm install
                    /bin/rm -r build/
                    npm run build
                    pm2 start \\\"npm run prod\\\" --name front
                  "
                 '''
            }
	  }
	}
      }
    }
    stage("Notify on slack") {
      steps {
        script {

          MSG = "New Frontend deployed!"
          TO_POST = """
            {
              "text": "${MSG}",
              "icon_emoji": ":comandante:",
              "channel": "CFN40LX55"
            }
          """
          httpRequest acceptType: 'APPLICATION_JSON', contentType: 'APPLICATION_JSON', httpMode: 'POST', requestBody: TO_POST, url: ('https://atixlabs.slack.com/services/hooks/incoming-webhook?token=' + SLACK_TOKEN)
        }

      }
    }
  }
}


